name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
      - new-build-scripting # Your feature branch
    paths:
      - 'homepage-app/**'
      - '.github/workflows/dynamic-deploy.yml'
      - '.github/workflows/deploy-app-reusable.yml' # Trigger if the reusable deploy workflow changes
      - '.github/workflows/utils-1.yml' # Trigger if the reusable find apps workflow changes

jobs:
  # The find_apps job remains, but deploy_all_apps will no longer depend on it
  find_apps: # Job 1: Finds all deployable app directories
    runs-on: ubuntu-latest
    outputs:
      app_dirs_json: ${{ steps.scan.outputs.app_dirs_json }}
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps
        id: scan
        run: |
          set -e

          ALL_APP_DIRS_ARRAY=()
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for DIR in $FOUND_DIRS; do
              ALL_APP_DIRS_ARRAY+=("$DIR")
            @ -60,6 +60,70 @@
          printf "app_dirs_json=%s\n" "$APP_DIRS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  deploy_all_apps: # Job: Orchestrates deployment of all apps (now runs first, depends on apps.json)
    # Removed dependency on find_apps and generate_docs_files
    # needs: [find_apps, generate_docs_files] # No longer needed
    runs-on: ubuntu-latest
    # The 'if' condition now checks if apps.json can be read and parsed
    # This job will run first in the sequence, after find_apps completes (but not dependent on it)
    # The matrix will be populated from apps.json
    strategy:
      fail-fast: false # Allow other apps to deploy even if one fails
      matrix:
        # The matrix will be generated by a step *within* this job
        app_data: ${{ fromJson(steps.read_apps_json_for_matrix.outputs.app_data_json) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read apps.json for Matrix
        id: read_apps_json_for_matrix # ID this step to get its output
        run: |
          set -e
          APPS_JSON_PATH="homepage-app/apps/apps.json" # Path to your apps.json file

          if [ ! -f "$APPS_JSON_PATH" ]; then
            echo "::warning::${APPS_JSON_PATH} not found. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT" # Output empty array for matrix
            exit 0
          fi

          # Read apps.json and extract app names and URLs for the matrix
          # The matrix needs a list of dictionaries, each containing 'app_dir' and 'heroku_app_name'
          # We'll re-use the 'name' from package.json as 'app_dir' for consistency with previous logic
          # and 'url' as 'heroku_app_name' (though it's a URL, the deploy action expects the app name)
          # We need to map 'name' to 'app_dir' and 'deployedUrl' to 'heroku_app_name' for the matrix.
          
          # Read the JSON file and transform it for the matrix
          # Each item in the matrix will be { "app_dir": "homepage-app", "heroku_app_name": "my-heroku-app" }
          APP_DATA_JSON=$(jq -c '[.[] | {"app_dir": .name, "heroku_app_name": (.url | split("/") | .[2] | split(".")[0])}]' "$APPS_JSON_PATH")

          # Example: If apps.json has [{"name": "homepage-app", "url": "https://abc-xyz.herokuapp.com/"}]
          # This transforms it to [{"app_dir": "homepage-app", "heroku_app_name": "abc-xyz"}]
          # The heroku_app_name extraction needs to be precise: split by '/', take index 2 (domain), then split by '.' and take index 0 (subdomain)

          if [ "$APP_DATA_JSON" == "[]" ]; then
            echo "::warning::${APPS_JSON_PATH} is empty or contains no valid app data. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Generated app data for matrix: $APP_DATA_JSON"
          echo "app_data_json=$APP_DATA_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Heroku CLI
        run: |
          curl -L https://cli-assets.heroku.com/install.sh -o /tmp/heroku-install.sh
          chmod +x /tmp/heroku-install.sh
          /tmp/heroku-install.sh
        shell: bash

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read App Config and Prepare Deploy Variables
        id: prepare_vars
        # This step will now use matrix.app_data directly
        run: |
          set -e
          # Access data from the matrix item
          APP_DIR="${{ matrix.app_data.app_dir }}"
          HEROKU_APP_TARGET_NAME="${{ matrix.app_data.heroku_app_name }}"

          echo "Current APP_DIR: $APP_DIR" # Debugging line
          APP_FOLDER_NAME=$(basename "$APP_DIR")
          
          # Re-read package.json to get its 'name' for consistency check
          PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")

          # Consistency Check: Folder Name vs. package.json 'name'
          if [ "$APP_FOLDER_NAME" != "$PACKAGE_JSON_APP_NAME" ]; then
            echo "::error::Inconsistency detected for app '${APP_FOLDER_NAME}' (path: '${APP_DIR}'):"
            echo "::error::Folder name ('${APP_FOLDER_NAME}') does NOT match 'name' in package.json ('${PACKAGE_JSON_APP_NAME}')."
            echo "::error::Please **rename either the folder or the 'name' in package.json to match**, then commit and re-run."
            exit 1 # Fail this specific matrix job
          fi

          # The herokuAppName check is implicitly handled by the apps.json generation,
          # but we still need to ensure the HEROKU_APP_TARGET_NAME from matrix is valid.
          if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
            echo "::error::Heroku app name (derived from URL in apps.json) is empty for app '${APP_FOLDER_NAME}'."
            echo "::error::Please ensure 'deployedUrl' is correctly set in '$APP_DIR/package.json' and points to a valid Heroku app URL."
            exit 1 # Fail this specific matrix job
          fi
          
          echo "Installing dependencies for ${APP_FOLDER_NAME} (path: '${APP_DIR}')..."
          npm install --prefix "$APP_DIR" || {
              echo "::error::npm install failed for app in '${APP_DIR}'. Deployment failed for this app."
              exit 1 # Fail this specific matrix job
          }

          # Output variables for the deploy action
          echo "heroku_app_name_for_deploy=$HEROKU_APP_TARGET_NAME" >> "$GITHUB_OUTPUT"
          echo "app_folder_name_for_deploy=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Deploy to Heroku - Actual Action
        id: deploy_action
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }} # Access directly from repository secrets
          heroku_email: ${{ secrets.HEROKU_EMAIL }}     # Access directly from repository secrets
          heroku_app_name: ${{ steps.prepare_vars.outputs.heroku_app_name_for_deploy }} # Use output from prepare_vars
          appdir: ${{ matrix.app_data.app_dir }} # Use app_dir from matrix

  generate_docs_files: # Job: Generates apps.md and apps.json files using Python
    needs: find_apps # Only needs 'find_apps' to get the list of apps
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.find_apps.outputs.app_dirs_json != '[]' # Only run if apps were found to generate docs for

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Checkout the branch we're working on

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version

      # NEW STEP: Check for presence of writable file secrets
      - name: Check Writable File Secrets
        run: |
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_APPS_MD secret is not set or is empty. Writing to apps.md might be skipped by the script."
          fi
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON secret is not set or is empty. Writing to homepage-app/apps/apps.json might be skipped by the script."
          fi
        shell: bash

      - name: Generate apps.md and apps.json Content with Python Script
        id: generate_content_py
        run: python .github/scripts/generate_app_list.py
        env:
          APP_DIRS_JSON_FROM_FIND_APPS: ${{ needs.find_apps.outputs.app_dirs_json }}
          RWT_WRITABLE_FILES: ${{ secrets.RWT_WRITABLE_FILES }} # Passed to the Python script
        shell: bash

      - name: Write apps.md File
        if: ${{ steps.generate_content_py.outputs.apps_md_updated_flag == 'true' }}
        run: |
          APPS_MD_SECTION_CONTENT="${{ steps.generate_content_py.outputs.apps_md_section_content }}"
          echo "$APPS_MD_SECTION_CONTENT" > apps.md
        shell: bash
      
      - name: Commit and Push generated files
        if: |
          always() &&
          (steps.generate_content_py.outputs.apps_md_updated_flag == 'true' || 
           steps.generate_content_py.outputs.apps_json_updated_flag == 'true')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links and JSON list"
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}
          add_options: "apps.md homepage-app/apps/apps.json"
