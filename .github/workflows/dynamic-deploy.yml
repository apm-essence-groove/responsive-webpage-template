name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
      - new-build-scripting # Your feature branch
    paths:
      - 'homepage-app/**'
      - '.github/workflows/dynamic-deploy.yml'
      - '.github/workflows/deploy-app-reusable.yml' # Trigger if the reusable workflow changes

jobs:
  find_apps: # Job 1: Finds all deployable app directories
    runs-on: ubuntu-latest
    outputs:
      app_dirs_json: ${{ steps.scan.outputs.app_dirs_json }}
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps
        id: scan
        run: |
          set -e

          ALL_APP_DIRS_ARRAY=()
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for DIR in $FOUND_DIRS; do
              ALL_APP_DIRS_ARRAY+=("$DIR")
            done
          done

          UNIQUE_APP_DIRS_NEWLINES=$(printf "%s\n" "${ALL_APP_DIRS_ARRAY[@]}" | sort -u)

          if [ -z "$UNIQUE_APP_DIRS_NEWLINES" ]; then
            echo "No applications found with package.json in '$APP_BASE_DIRS'. Exiting."
            printf "app_dirs_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Found applications in directories (for debugging):"
          echo "$UNIQUE_APP_DIRS_NEWLINES"

          APP_DIRS_JSON=$(echo "$UNIQUE_APP_DIRS_NEWLINES" | jq -R . | jq -s -c .)
          echo "Generated JSON (single line): $APP_DIRS_JSON"

          printf "app_dirs_json=%s\n" "$APP_DIRS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  generate_docs_files: # Job: Generates apps.md and apps.json files using Python (runs before deploy)
    needs: find_apps # Only needs 'find_apps' to get the list of apps
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.find_apps.outputs.app_dirs_json != '[]' # Only run if apps were found to generate docs for

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Checkout the branch we're working on

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python version

      # NEW STEP: Check for presence of writable file secrets
      - name: Check Writable File Secrets
        run: |
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_APPS_MD secret is not set or is empty. Writing to apps.md might be skipped by the script."
          fi
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON secret is not set or is empty. Writing to homepage-app/apps/apps.json might be skipped by the script."
          fi
        shell: bash

      - name: Generate apps.md and apps.json Content with Python Script
        id: generate_content_py
        run: python .github/scripts/generate_app_list.py
        env:
          APP_DIRS_JSON_FROM_FIND_APPS: ${{ needs.find_apps.outputs.app_dirs_json }}
          RWT_WRITABLE_FILES: ${{ secrets.RWT_WRITABLE_FILES }} # Passed to the Python script
        shell: bash

      - name: Write apps.md File
        if: ${{ steps.generate_content_py.outputs.apps_md_updated_flag == 'true' }}
        run: |
          APPS_MD_SECTION_CONTENT="${{ steps.generate_content_py.outputs.apps_md_section_content }}"
          echo "$APPS_MD_SECTION_CONTENT" > apps.md
        shell: bash
      
      - name: Commit and Push generated files
        if: |
          always() &&
          (steps.generate_content_py.outputs.apps_md_updated_flag == 'true' || 
           steps.generate_content_py.outputs.apps_json_updated_flag == 'true')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links and JSON list"
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}
          add_options: "apps.md homepage-app/apps/apps.json"

  deploy_all_apps: # Job: Orchestrates deployment of all apps using reusable workflow (now runs after docs generation)
    needs: [find_apps, generate_docs_files] # Now depends on docs generation completing
    runs-on: ubuntu-latest
    if: ${{ needs.find_apps.outputs.app_dirs_json != '[]' }}
    strategy:
      fail-fast: false # Allow other apps to deploy even if one fails
      matrix:
        app_dir: ${{ fromJson(needs.find_apps.outputs.app_dirs_json) }}

    steps:
      - name: Deploy App - ${{ matrix.app_dir }}
        uses: ./.github/workflows/deploy-app-reusable.yml
        with:
          app_dir: ${{ matrix.app_dir }}
        secrets:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
