name: Dynamic Multi-App Discovery

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on (e.g., main, new-apps)'
        required: true
        default: 'main'
  push:
    branches:
      - main
      - new-workflow
    paths:
      - '**'

jobs:
  find_apps: # Job 1: Finds all deployable app directories and their details (no needs)
    runs-on: ubuntu-latest # <--- ADD THIS LINE BACK
    outputs:
      app_details_json: ${{ steps.scan.outputs.app_details_json }}
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps and Collect Details
        id: scan
        run: |
          set -e

          APP_DETAILS_ARRAY=() # Array to store JSON objects for each app
          echo "--- Starting App Scan ---"
          echo "Scanning for apps in base directories: $APP_BASE_DIRS"
          echo "Current working directory: $(pwd)" # Debug: Show current working directory

          for BASE_DIR in $APP_BASE_DIRS; do
            echo "Searching for package.json in base directory: $BASE_DIR"
            if [ ! -d "$BASE_DIR" ]; then
              echo "::error::Base directory '$BASE_DIR' not found. Please ensure it exists."
              continue
            fi

            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            
            if [ -z "$FOUND_DIRS" ]; then
              echo "No package.json files found directly within or under '$BASE_DIR'."
            else
              echo "Found potential app directories with package.json under '$BASE_DIR':"
              echo "$FOUND_DIRS" | sed 's/^/- /'
            fi

            for APP_DIR in $FOUND_DIRS; do
              PACKAGE_JSON_PATH="$APP_DIR/package.json"
              echo "--- Processing app directory: $APP_DIR ---"
              echo "Checking package.json path: $PACKAGE_JSON_PATH"

              if [ ! -f "$PACKAGE_JSON_PATH" ]; then
                echo "::warning::package.json not found for ${APP_DIR}. Skipping."
                continue
              fi

              APP_NAME=$(jq -r '.name' "$PACKAGE_JSON_PATH" || echo "")
              HEROKU_APP_NAME=$(jq -r '.herokuAppName' "$PACKAGE_JSON_PATH" || echo "")
              DEPLOYED_URL=$(jq -r '.deployedUrl' "$PACKAGE_JSON_PATH" || echo "")

              echo "  - Extracted Name: '$APP_NAME'"
              echo "  - Extracted Heroku App Name: '$HEROKU_APP_NAME'"
              echo "  - Extracted Deployed URL: '$DEPLOYED_URL'"

              if [ -z "$APP_NAME" ] || [ "$APP_NAME" == "null" ]; then
                  echo "::warning::'name' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi
              if [ -z "$HEROKU_APP_NAME" ] || [ "$HEROKU_APP_NAME" == "null" ]; then
                  echo "::warning::'herokuAppName' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi
              if [ -z "$DEPLOYED_URL" ] || [ "$DEPLOYED_URL" == "null" ]; then
                  echo "::warning::'deployedUrl' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi

              APP_FOLDER_NAME=$(basename "$APP_DIR")
              echo "  - App Folder Name: '$APP_FOLDER_NAME'"
              if [ "$APP_FOLDER_NAME" != "$APP_NAME" ]; then
                  echo "::warning::Inconsistency: Folder name ('${APP_FOLDER_NAME}') does NOT match 'name' in package.json ('${APP_NAME}'). Using folder name as primary identifier for consistency."
              fi

              APP_JSON_OBJ="{\"app_dir\":\"$APP_DIR\", \"name\":\"$APP_NAME\", \"herokuAppName\":\"$HEROKU_APP_NAME\", \"url\":\"$DEPLOYED_URL\"}"
              APP_DETAILS_ARRAY+=("$APP_JSON_OBJ")
              echo "  - App added to list: $APP_JSON_OBJ"
            done
          done

          echo "--- App Scan Summary ---"
          if [ ${#APP_DETAILS_ARRAY[@]} -eq 0 ]; then
            echo "No valid applications found during scan."
            printf "app_details_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "Total valid applications found: ${#APP_DETAILS_ARRAY[@]}"
            APP_DETAILS_JSON=$(printf "%s\n" "${APP_DETAILS_ARRAY[@]}" | jq -s -c .)
            echo "Generated App Details JSON: $APP_DETAILS_JSON"
            printf "app_details_json=%s\n" "$APP_DETAILS_JSON" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

  generate_docs_files: # This job and all subsequent jobs must be indented two spaces under 'jobs:'
    needs: find_apps # This dependency is still required to get current app_details_json
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.find_apps.outputs.app_details_json != '[]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Check Writable File Secrets
        run: |
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_APPS_MD secret is not set or is empty."
            echo "::warning::To enable writing to 'apps.md', create a repository secret named 'RWT_WRITABLE_FILE_APPS_MD' with the value 'apps.md'."
          fi
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON secret is not set or is empty."
            echo "::warning::To enable writing to 'homepage-app/apps/apps.json', create a repository secret named 'RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON' with the value 'homepage-app/apps/apps.json'."
          fi
        shell: bash

      - name: Generate apps.md and apps.json Content with Python Script
        id: generate_content_py
        run: python .github/scripts/generate_app_list.py
        env:
          APP_DATA_FROM_FIND_APPS: ${{ needs.find_apps.outputs.app_details_json }}
          RWT_WRITABLE_FILE_APPS_MD: ${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}
          RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON: ${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}
        shell: bash

      - name: Write apps.md File
        if: ${{ steps.generate_content_py.outputs.apps_md_updated_flag == 'true' }}
        run: |
          APPS_MD_SECTION_CONTENT="${{ steps.generate_content_py.outputs.apps_md_section_content }}"
          echo "$APPS_MD_SECTION_CONTENT" > apps.md
        shell: bash

      - name: Upload homepage-app/apps/apps.json as Artifact # NEW STEP: Upload the JSON
        uses: actions/upload-artifact@v4
        with:
          name: latest-apps-json # Name your artifact
          path: homepage-app/apps/apps.json
          retention-days: 7 # Adjust as needed (e.g., 7 days is common for temporary data)

      - name: Commit and Push generated files # This job is primarily for version control
        if: |
          always() &&
          (steps.generate_content_py.outputs.apps_md_updated_flag == 'true' ||
           steps.generate_content_py.outputs.apps_json_updated_flag == 'true')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links and JSON list"
          branch: ${{ github.event.inputs.branch || github.ref }}
          add_options: "apps.md homepage-app/apps/apps.json"
          skip_dirty_check: true

  prepare_deploy_matrix:
    runs-on: ubuntu-latest
    outputs:
      app_data_json: ${{ steps.read_json.outputs.app_data_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Latest Workflow Run ID for Artifact Download # NEW STEP: Find the run ID
        id: get_run_id
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'dynamic-deploy.yml', # Replace with your workflow file name
              branch: 'main', # The branch where the successful artifact should exist
              status: 'success',
              per_page: 1
            });
            if (workflow_runs.length > 0) {
              core.setOutput('run_id', workflow_runs[0].id);
              console.log(`Found latest successful run ID: ${workflow_runs[0].id}`);
            } else {
              core.setFailed('No successful workflow run found on "main" to download artifacts from.');
            }
          result-encoding: json

      - name: Download latest-apps-json Artifact # NEW STEP: Download the artifact
        uses: actions/download-artifact@v4
        if: ${{ steps.get_run_id.outputs.run_id }} # Only if a run ID was successfully found
        with:
          name: latest-apps-json # Must match the name used in upload-artifact
          path: homepage-app/apps/ # Download to this specific directory

      - name: Read apps.json for Matrix
        id: read_json
        run: |
          set -e
          APPS_JSON_PATH="homepage-app/apps/apps.json"

          if [ ! -f "$APPS_JSON_PATH" ] || [ ! -s "$APPS_JSON_PATH" ]; then
            echo "::warning::${APPS_JSON_PATH} (downloaded artifact) not found or is empty. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          APP_DATA_JSON=$(jq -c '[.[] | {"app_dir": .app_dir, "heroku_app_name": .herokuAppName, "url": .url}]' "$APPS_JSON_PATH")

          if [ "$APP_DATA_JSON" == "[]" ]; then
            echo "::warning::${APPS_JSON_PATH} (downloaded artifact) contains no valid app data. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Generated app data for matrix: $APP_DATA_JSON"
          echo "app_data_json=$APP_DATA_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  deploy_all_apps:
    needs: prepare_deploy_matrix # This dependency remains to get the matrix data
    runs-on: ubuntu-latest
    if: ${{ needs.prepare_deploy_matrix.outputs.app_data_json != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        app_data: ${{ fromJson(needs.prepare_deploy_matrix.outputs.app_data_json) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Heroku CLI
        run: |
          curl -L https://cli-assets.heroku.com/install.sh -o /tmp/heroku-install.sh
          chmod +x /tmp/heroku-install.sh
          /tmp/heroku-install.sh
        shell: bash

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read App Config and Prepare Deploy Variables # <-- This is the step
        id: prepare_vars
        run: |
          set -e
          APP_DIR="${{ matrix.app_data.app_dir }}"
          HEROKU_APP_TARGET_NAME="${{ matrix.app_data.heroku_app_name }}"
          DEPLOYED_URL="${{ matrix.app_data.url }}"

          echo "Current APP_DIR: $APP_DIR"
          echo "Current HEROKU_APP_TARGET_NAME: $HEROKU_APP_TARGET_NAME"
          echo "Current DEPLOYED_URL: $DEPLOYED_URL"
          APP_FOLDER_NAME=$(basename "$APP_DIR")
          
          # Re-read package.json to get its 'name' for consistency check
          PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")
          echo "PACKAGE_JSON_APP_NAME read from package.json: $PACKAGE_JSON_APP_NAME"

          if [ "$APP_FOLDER_NAME" != "$PACKAGE_JSON_APP_NAME" ]; then
            echo "::error::Inconsistency detected for app '${APP_FOLDER_NAME}' (path: '${APP_DIR}'):"
            echo "::error::Folder name ('${APP_FOLDER_NAME}') does NOT match 'name' in package.json ('${PACKAGE_JSON_APP_NAME}')."
            echo "::error::Please **rename either the folder or the 'name' in package.json to match**, then commit and re-run."
            exit 1
          fi

          if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
            echo "::error::Heroku app name (from apps.json) is empty for app '${APP_FOLDER_NAME}'."
            echo "::error::Please ensure 'herokuAppName' is correctly set in 'homepage-app/apps/apps.json' for this app."
            exit 1
          fi
          
          echo "Installing dependencies for ${APP_FOLDER_NAME} (path: '${APP_DIR}')..."
          npm install --prefix "$APP_DIR" || {
              echo "::error::npm install failed for app in '${APP_DIR}'. Deployment failed for this app."
              exit 1
          }

          echo "heroku_app_name_for_deploy=$HEROKU_APP_TARGET_NAME" >> "$GITHUB_OUTPUT"
          echo "app_folder_name_for_deploy=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT"
          echo "deployed_url_for_docs=$DEPLOYED_URL" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Deploy to Heroku - Actual Action
        id: deploy_action
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ steps.prepare_vars.outputs.heroku_app_name_for_deploy }}
          appdir: ${{ matrix.app_data.app_dir }}}
