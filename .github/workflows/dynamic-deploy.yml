name: Dynamic Multi-App Heroku Deploy

on:
  pull_request:
    branches:
      - sub-mix-1
      - new-apps
    paths:
      - '**'


jobs:
  find_apps: # Job 1: Finds all deployable app directories and their details (no needs)
    runs-on: ubuntu-latest
    outputs:
      # Output a JSON array of objects, each with app_dir, name, herokuAppName, and deployedUrl
      app_details_json: ${{ steps.scan.outputs.app_details_json }}
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps and Collect Details
        id: scan
        run: |
          set -e

          APP_DETAILS_ARRAY=() # Array to store JSON objects for each app
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for APP_DIR in $FOUND_DIRS; do
              PACKAGE_JSON_PATH="$APP_DIR/package.json"

              if [ ! -f "$PACKAGE_JSON_PATH" ]; then
                echo "::warning::package.json not found for ${APP_DIR}. Skipping."
                continue
              fi

              # Read details from package.json
              APP_NAME=$(jq -r '.name' "$PACKAGE_JSON_PATH" || echo "")
              HEROKU_APP_NAME=$(jq -r '.herokuAppName' "$PACKAGE_JSON_PATH" || echo "")
              DEPLOYED_URL=$(jq -r '.deployedUrl' "$PACKAGE_JSON_PATH" || echo "")

              # Basic validation for essential fields
              if [ -z "$APP_NAME" ] || [ "$APP_NAME" == "null" ]; then
                  echo "::warning::'name' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi
              if [ -z "$HEROKU_APP_NAME" ] || [ "$HEROKU_APP_NAME" == "null" ]; then
                  echo "::warning::'herokuAppName' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi
              if [ -z "$DEPLOYED_URL" ] || [ "$DEPLOYED_URL" == "null" ]; then
                  echo "::warning::'deployedUrl' field missing or empty in ${PACKAGE_JSON_PATH}. Skipping app."
                  continue
              fi

              # Consistency Check: Folder Name vs. package.json 'name'
              APP_FOLDER_NAME=$(basename "$APP_DIR")
              if [ "$APP_FOLDER_NAME" != "$APP_NAME" ]; then
                  echo "::warning::Inconsistency: Folder name ('${APP_FOLDER_NAME}') does NOT match 'name' in package.json ('${APP_NAME}'). Using folder name as primary identifier for consistency."
              fi

              # Construct JSON object for this app with all details
              APP_JSON_OBJ="{\"app_dir\":\"$APP_DIR\", \"name\":\"$APP_NAME\", \"herokuAppName\":\"$HEROKU_APP_NAME\", \"url\":\"$DEPLOYED_URL\"}"
              APP_DETAILS_ARRAY+=("$APP_JSON_OBJ")
            done
          done

          if [ ${#APP_DETAILS_ARRAY[@]} -eq 0 ]; then
            echo "No valid applications found. Exiting."
            printf "app_details_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Convert array of JSON objects into a single JSON array string
          APP_DETAILS_JSON=$(printf "%s\n" "${APP_DETAILS_ARRAY[@]}" | jq -s -c .)
          echo "Generated App Details JSON: $APP_DETAILS_JSON"

          printf "app_details_json=%s\n" "$APP_DETAILS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  generate_docs_files: # Job 2: Generates apps.md and apps.json files using Python
    needs: find_apps # FIX: Only needs 'find_apps' now
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.find_apps.outputs.app_details_json != '[]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Check Writable File Secrets # Updated warning message
        run: |
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_APPS_MD secret is not set or is empty."
            echo "::warning::To enable writing to 'apps.md', create a repository secret named 'RWT_WRITABLE_FILE_APPS_MD' with the value 'apps.md'."
          fi
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON secret is not set or is empty."
            echo "::warning::To enable writing to 'homepage-app/apps/apps.json', create a repository secret named 'RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON' with the value 'homepage-app/apps/apps.json'."
          fi
        shell: bash

      - name: Generate apps.md and apps.json Content with Python Script
        id: generate_content_py
        run: python .github/scripts/generate_app_list.py
        env:
          # Pass the rich app details JSON from find_apps directly
          APP_DATA_FROM_FIND_APPS: ${{ needs.find_apps.outputs.app_details_json }}
          # Removed APP_DATA_MATRIX_JSON as it's no longer needed for this script
          RWT_WRITABLE_FILES: ${{ secrets.RWT_WRITABLE_FILES }}
          RWT_WRITABLE_FILE_APPS_MD: ${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}
          RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON: ${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}
        shell: bash

      - name: Write apps.md File
        if: ${{ steps.generate_content_py.outputs.apps_md_updated_flag == 'true' }}
        run: |
          APPS_MD_SECTION_CONTENT="${{ steps.generate_content_py.outputs.apps_md_section_content }}"
          echo "$APPS_MD_SECTION_CONTENT" > apps.md
        shell: bash
      
      - name: Commit and Push generated files
        if: |
          always() &&
          (steps.generate_content_py.outputs.apps_md_updated_flag == 'true' || 
           steps.generate_content_py.outputs.apps_json_updated_flag == 'true')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links and JSON list"
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}
          add_options: "apps.md homepage-app/apps/apps.json"
