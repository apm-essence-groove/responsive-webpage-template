name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
    # Trigger if any file within the 'homepage-app' directory (including all its subfolders) changes,
    # or if the workflow file itself changes.
    paths:
      - 'homepage-app/**' # <--- This will now correctly capture changes in homepage-app/package.json
                          #      AND homepage-app/to_do_list/package.json (and other files)
      - '.github/workflows/dynamic-deploy.yml'

jobs:
  deploy_apps:
    runs-on: ubuntu-latest
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      APP_BASE_DIRS: "homepage-app"
      HEROKU_APP_SECRET_PREFIX: 'HEROKU_APP_NAME_'

      # --- YOU MUST LIST ALL YOUR APP-SPECIFIC SECRETS HERE ---
      # Example:
      HEROKU_APP_NAME_HOMEPAGE_APP: ${{ secrets.HEROKU_APP_NAME_HOMEPAGE_APP }}
      HEROKU_APP_NAME_TO_DO_LIST: ${{ secrets.HEROKU_APP_NAME_TO_DO_LIST }}
      # Add more lines here as you add new apps:
      # HEROKU_APP_NAME_YOUR_NESTED_APP_FOLDER_NAME_UPPERCASE: ${{ secrets.HEROKU_APP_NAME_YOUR_NESTED_APP_FOLDER_NAME_UPPERCASE }}
      # -----------------------------------------------------------

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find and Deploy Apps
        id: deployer
        run: |
          set -e # Exit immediately if a critical command fails

          ALL_APP_DIRS=""
          for BASE_DIR in $APP_BASE_DIRS; do
            echo "Scanning for apps in: $BASE_DIR"
            # Finds package.json files within BASE_DIR and any of its subdirectories
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            ALL_APP_DIRS="$ALL_APP_DIRS $FOUND_DIRS"
          done

          ALL_APP_DIRS=$(echo "$ALL_APP_DIRS" | tr ' ' '\n' | sort -u | tr '\n' ' ')

          if [ -z "$ALL_APP_DIRS" ]; then
            echo "No applications found with package.json in '$APP_BASE_DIRS'. Skipping deployment."
            exit 0
          fi

          echo "Found applications in directories:"
          for d in $ALL_APP_DIRS; do echo "- $d"; done

          DEPLOYMENT_SUCCESS=true

          for APP_DIR in $ALL_APP_DIRS; do
            echo "--- Processing app in: $APP_DIR ---"

            if [ "$APP_DIR" == "homepage-app" ]; then
                APP_SECRET_IDENTIFIER="HOMEPAGE_APP"
            else
                APP_SECRET_IDENTIFIER=$(basename "$APP_DIR")
            fi

            PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")

            if [ "$APP_SECRET_IDENTIFIER" == "HOMEPAGE_APP" ]; then
                if [ "$APP_SECRET_IDENTIFIER" != "$(echo ${PACKAGE_JSON_APP_NAME} | tr '[:lower:]-' '[:upper:]_')" ]; then
                    echo "::error::Inconsistency detected for main app (path: '${APP_DIR}'):"
                    echo "::error::Internal identifier ('${APP_SECRET_IDENTIFIER}') does NOT match uppercase 'name' in package.json ('$(echo ${PACKAGE_JSON_APP_NAME} | tr '[:lower:]-' '[:upper:]_')')."
                    echo "::error::Please ensure the 'name' in homepage-app/package.json is 'homepage-app' for consistent secret lookup."
                    DEPLOYMENT_SUCCESS=false
                    continue
                fi
            elif [ "$APP_SECRET_IDENTIFIER" != "$PACKAGE_JSON_APP_NAME" ]; then
              echo "::error::Inconsistency detected for app '${APP_SECRET_IDENTIFIER}' (path: '${APP_DIR}'):"
              echo "::error::Folder name ('${APP_SECRET_IDENTIFIER}') does NOT match 'name' in package.json ('${PACKAGE_JSON_APP_NAME}')."
              echo "::error::Please **rename either the folder or the 'name' in package.json to match**, then commit and re-run. This app will be skipped."
              DEPLOYMENT_SUCCESS=false
              continue
            fi

            APP_SECRET_ENV_VAR_NAME="${HEROKU_APP_SECRET_PREFIX}$(echo ${APP_SECRET_IDENTIFIER} | tr '[:lower:]-' '[:upper:]_')"
            HEROKU_APP_TARGET_NAME="${!APP_SECRET_ENV_VAR_NAME}"

            if [ -z "$HEROKU_APP_TARGET_NAME" ]; then
              echo "::error::Heroku app name secret '${APP_SECRET_ENV_VAR_NAME}' is UNDEFINED or EMPTY for app '${APP_SECRET_IDENTIFIER}' (path: '${APP_DIR}')."
              echo "::error::Please ensure this secret is correctly defined and its value is set in your GitHub repository secrets and also listed in the 'env' block of this GitHub Actions workflow job."
              DEPLOYMENT_SUCCESS=false
              continue
            fi
            
            echo "Installing dependencies for ${APP_SECRET_IDENTIFIER} (path: '${APP_DIR}')..."
            npm install --prefix "$APP_DIR" || {
                echo "::error::npm install failed for app in '${APP_DIR}'. Skipping deployment for this app."
                DEPLOYMENT_SUCCESS=false
                continue
            }

            echo "Attempting to deploy ${APP_SECRET_IDENTIFIER} to Heroku app: ${HEROKU_APP_TARGET_NAME}"
            
            /usr/bin/docker run --rm \
              -e HEROKU_API_KEY="$HEROKU_API_KEY" \
              -e HEROKU_EMAIL="$HEROKU_EMAIL" \
              -e HEROKU_APP_NAME="$HEROKU_APP_TARGET_NAME" \
              -e APPDIR="$APP_DIR" \
              akhileshns/heroku-deploy:v3.13.15 || {
                echo "::error::Deployment of ${APP_SECRET_IDENTIFIER} (path: '${APP_DIR}') to Heroku app ${HEROKU_APP_TARGET_NAME} FAILED."
                DEPLOYMENT_SUCCESS=false
              }
          
            echo "--- Finished processing app in: $APP_DIR ---"
          done

          if [ "$DEPLOYMENT_SUCCESS" = false ]; then
            echo "::error::One or more application deployments failed due to errors or inconsistencies. Please review the logs above."
            exit 1
          fi

        shell: bash
