name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
    paths:
      - 'homepage-app/**'
      - '.github/workflows/dynamic-deploy.yml'

jobs:
  find_apps: # Job 1: Finds all deployable app directories
    runs-on: ubuntu-latest
    outputs:
      app_dirs_json: ${{ steps.scan.outputs.app_dirs_json }} # Output the JSON array of app directories
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find and Deploy Apps
        id: scan
        run: |
          set -e

          ALL_APP_DIRS_ARRAY=()
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for DIR in $FOUND_DIRS; do
              ALL_APP_DIRS_ARRAY+=("$DIR")
            done
          done

          UNIQUE_APP_DIRS_NEWLINES=$(printf "%s\n" "${ALL_APP_DIRS_ARRAY[@]}" | sort -u)

          if [ -z "$UNIQUE_APP_DIRS_NEWLINES" ]; then
            echo "No applications found with package.json in '$APP_BASE_DIRS'. Exiting."
            printf "app_dirs_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Found applications in directories (for debugging):"
          echo "$UNIQUE_APP_DIRS_NEWLINES"

          # --- CRITICAL FIX: Force jq to output on a single line with -c ---
          APP_DIRS_JSON=$(echo "$UNIQUE_APP_DIRS_NEWLINES" | jq -R . | jq -s -c .) # <--- Added -c here
          echo "Generated JSON (single line): $APP_DIRS_JSON" # Log for confirmation

          # Set the output variable for the next job
          printf "app_dirs_json=%s\n" "$APP_DIRS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash
        


  deploy_each_app: # Job 2: Deploys each app found in the previous job
    needs: find_apps
    runs-on: ubuntu-latest
    if: ${{ needs.find_apps.outputs.app_dirs_json != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        app_dir: ${{ fromJson(needs.find_apps.outputs.app_dirs_json) }}

    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- ADD THIS STEP ---
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
      # ---------------------

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read App Config and Prepare Deploy Variables
        id: prepare_vars
        run: |
          set -e
          APP_DIR="${{ matrix.app_dir }}"
          APP_FOLDER_NAME=$(basename "$APP_DIR")
          PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")
          HEROKU_APP_TARGET_NAME=$(jq -r '.herokuAppName' "$APP_DIR/package.json" || echo "")

          if [ "$APP_FOLDER_NAME" != "$PACKAGE_JSON_APP_NAME" ]; then
            echo "::error::Inconsistency: Folder name ('${APP_FOLDER_NAME}') != package.json name ('${PACKAGE_JSON_APP_NAME}')."
            exit 1
          fi
          if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
            echo "::error::'herokuAppName' missing or empty in '$APP_DIR/package.json'."
            exit 1
          fi

          echo "Installing dependencies for ${APP_FOLDER_NAME} (path: '${APP_DIR}')..."
          npm install --prefix "$APP_DIR" || {
              echo "::error::npm install failed for app in '${APP_DIR}'."
              exit 1
          }

          echo "heroku_app_name=$HEROKU_APP_TARGET_NAME" >> "$GITHUB_OUTPUT"
          echo "app_folder_name=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Deploy to Heroku - Actual Action
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ steps.prepare_vars.outputs.heroku_app_name }}
          appdir: ${{ matrix.app_dir }}
