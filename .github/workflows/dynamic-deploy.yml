name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
    paths:
      - 'homepage-app/**'
      - '.github/workflows/dynamic-deploy.yml'

jobs:
  find_apps:
    runs-on: ubuntu-latest
    outputs:
      app_dirs_json: ${{ steps.scan.outputs.app_dirs_json }}
    env:
      # FIX: Only list the top-level app folder to scan.
      # The 'find' command will recursively find nested apps within 'homepage-app'.
      APP_BASE_DIRS: "homepage-app" # <--- CORRECTED LINE

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps
        id: scan
        run: |
          set -e

          ALL_APP_DIRS_ARRAY=()
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            # Find package.json files within BASE_DIR and any of its subdirectories
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for DIR in $FOUND_DIRS; do
              ALL_APP_DIRS_ARRAY+=("$DIR")
            done
          done

          UNIQUE_APP_DIRS_NEWLINES=$(printf "%s\n" "${ALL_APP_DIRS_ARRAY[@]}" | sort -u)

          if [ -z "$UNIQUE_APP_DIRS_NEWLINES" ]; then
            echo "No applications found with package.json in '$APP_BASE_DIRS'. Exiting."
            printf "app_dirs_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Found applications in directories (for debugging):"
          echo "$UNIQUE_APP_DIRS_NEWLINES"

          APP_DIRS_JSON=$(echo "$UNIQUE_APP_DIRS_NEWLINES" | jq -R . | jq -s -c .)
          echo "Generated JSON (single line): $APP_DIRS_JSON"

          printf "app_dirs_json=%s\n" "$APP_DIRS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  # ... (deploy_each_app job and update_readme job remain unchanged) ...

  deploy_each_app: # Job 2: Deploys each app found in the previous job
    needs: find_apps
    runs-on: ubuntu-latest
    if: ${{ needs.find_apps.outputs.app_dirs_json != '[]' }}
    strategy:
      fail-fast: false # Allow other apps to deploy even if one fails
      matrix:
        app_dir: ${{ fromJson(needs.find_apps.outputs.app_dirs_json) }}

    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read App Config and Prepare Deploy Variables
        id: prepare_vars # ID this step
        run: |
          set -e
          APP_DIR="${{ matrix.app_dir }}"
          APP_FOLDER_NAME=$(basename "$APP_DIR")
          PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")
          HEROKU_APP_TARGET_NAME=$(jq -r '.herokuAppName' "$APP_DIR/package.json" || echo "")

          # Consistency Check
          if [ "$APP_FOLDER_NAME" != "$PACKAGE_JSON_APP_NAME" ]; then
            echo "::error::Inconsistency: Folder name ('${APP_FOLDER_NAME}') != package.json name ('${PACKAGE_JSON_APP_NAME}')."
            exit 1
          fi
          if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
            echo "::error::'herokuAppName' missing or empty in '$APP_DIR/package.json'."
            exit 1
          fi

          echo "Installing dependencies for ${APP_FOLDER_NAME} (path: '${APP_DIR}')..."
          npm install --prefix "$APP_DIR" || {
              echo "::error::npm install failed for app in '${APP_DIR}'."
              exit 1
          }

          # Output variables that the subsequent 'uses' step can consume
          echo "heroku_app_name=$HEROKU_APP_TARGET_NAME" >> "$GITHUB_OUTPUT"
          echo "app_folder_name=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT" # Output folder name for README

        shell: bash

      - name: Deploy to Heroku - Actual Action
        id: deploy_action # ID the deploy step to check its status
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ steps.prepare_vars.outputs.heroku_app_name }}
          appdir: ${{ matrix.app_dir }}

      - name: Store Deployed App URL (if successful)
        if: success() # Only run this if the 'Deploy to Heroku' step was successful
        id: store_url
        run: |
          APP_FOLDER_NAME="${{ steps.prepare_vars.outputs.app_folder_name }}"
          HEROKU_APP_NAME="${{ steps.prepare_vars.outputs.heroku_app_name }}"
          APP_URL="https://${HEROKU_APP_NAME}.herokuapp.com/"
          
          # Store the URL in a way that the final update step can access it.
          # We'll use a temporary file, but its content will be read in a *later* job.
          # For a matrix, this means each matrix instance writes to its own temp file.
          
          # This requires outputting a specific structure to a file.
          # A better way is to use a dedicated step to aggregate all URLs
          # after the matrix job completes.

          # We need to output the app name and URL so the next job can gather them.
          echo "deployed_app_name=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT"
          echo "deployed_app_url=$APP_URL" >> "$GITHUB_OUTPUT"

  update_readme: # Job 3: Updates README.md after all deployments
    needs: [deploy_each_app, find_apps] # <--- ADD 'find_apps' to needs
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.deploy_each_app.result == 'success' &&
      needs.find_apps.outputs.app_dirs_json != '[]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate README Content
        id: generate_content
        run: |
          set -e
          echo "Generating README content..."
          
          # --- FIX: Pass APP_DIRS_JSON from the previous job's output.
          # The problem is that when you hardcode a JSON string in Bash,
          # Bash interprets the inner quotes.
          # You MUST use the output from 'needs.find_apps.outputs.app_dirs_json'
          # wrapped in double quotes.
          APP_DIRS_JSON="${{ needs.find_apps.outputs.app_dirs_json }}" # <--- This is the correct way to get it
          
          # This line below (from your log) is what caused the error because
          # it hardcoded the JSON string with incorrect Bash quoting for inner quotes.
          # APP_DIRS_JSON="["homepage-app","homepage-app/to_do_list"]"
          
          APP_DIRS=$(echo "$APP_DIRS_JSON" | jq -r '.[]') # Convert JSON array back to newline-separated strings
          
          if [ -z "$APP_DIRS" ]; then
            echo "No app directories received from find_apps job. Skipping README content generation."
            echo "readme_section_content=" >> "$GITHUB_OUTPUT"
            echo "readme_updated_flag=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          README_CONTENT="## ðŸš€ Live Demos\n\n"
          README_UPDATED_FLAG=false
          
          for APP_DIR in $APP_DIRS; do
            APP_FOLDER_NAME=$(basename "$APP_DIR")
            
            HEROKU_APP_TARGET_NAME=$(jq -r '.herokuAppName' "$APP_DIR/package.json" || echo "") 
            
            if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
                echo "::warning::Skipping README update for '${APP_FOLDER_NAME}' as 'herokuAppName' is missing in its package.json."
                continue
            fi
            
            APP_URL="https://${HEROKU_APP_TARGET_NAME}.herokuapp.com/"
            README_CONTENT+="* **${APP_FOLDER_NAME}:** [${APP_URL}](${APP_URL})\n"
            README_UPDATED_FLAG=true
          done
          
          README_SECTION_CONTENT_ESCAPED=$(echo -e "$README_CONTENT" | sed -E ':a;N;$!ba;s/\n/%0A/g' | sed -E 's/\r/%0D/g' | sed -E 's/%/%25/g')
          echo "readme_section_content=$README_SECTION_CONTENT_ESCAPED" >> "$GITHUB_OUTPUT"
          echo "readme_updated_flag=$README_UPDATED_FLAG" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Update README.md File
        if: ${{ steps.generate_content.outputs.readme_updated_flag == 'true' }}
        run: |
          # Decode the content
          README_SECTION_CONTENT=$(echo "${{ steps.generate_content.outputs.readme_section_content }}" | sed 's/%0A/\n/g;s/%0D/\r/g;s/%25/%/g')

          # Define start and end markers in your README.md
          START_MARKER="<!-- START_APP_LINKS -->"
          END_MARKER="<!-- END_APP_LINKS -->"

          # Use awk for a more robust way to replace content between markers
          awk -v start="$START_MARKER" -v end="$END_MARKER" -v content="$README_SECTION_CONTENT" '
              $0 ~ start { print; print content; in_block=1; next }
              $0 ~ end { print; in_block=0; next }
              !in_block { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md
        shell: bash

      - name: Commit and Push README.md
        if: ${{ steps.generate_content.outputs.readme_updated_flag == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links in README.md"
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}
