name: Dynamic Multi-App Heroku Deploy

on:
  push:
    branches:
      - main # Or 'master'
      - new-build-scripting
    paths:
      - 'homepage-app/**'
      - '.github/workflows/dynamic-deploy.yml'
      - '.github/workflows/deploy-app-reusable.yml'
      - '.github/workflows/utils-1.yml'

jobs:
  prepare_deploy_matrix: # NEW JOB: Reads apps.json and outputs the matrix data for deploy_all_apps (now runs first)
    runs-on: ubuntu-latest
    outputs:
      app_data_json: ${{ steps.read_json.outputs.app_data_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Read apps.json for Matrix
        id: read_json
        run: |
          set -e
          APPS_JSON_PATH="homepage-app/apps/apps.json" # Path to your apps.json file

          if [ ! -f "$APPS_JSON_PATH" ] || [ ! -s "$APPS_JSON_PATH" ]; then # -s checks if file is not empty
            echo "::warning::${APPS_JSON_PATH} not found or is empty. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT" # Output empty array for matrix
            exit 0
          fi

          # Read apps.json and extract app names and URLs for the matrix
          # The matrix needs a list of dictionaries, each containing 'app_dir' and 'heroku_app_name'
          # 'app_dir' is derived from the 'name' field in apps.json, constructing the full path.
          # 'heroku_app_name' is derived from the 'url' field.
          APP_DATA_JSON=$(jq -c '[.[] | {"app_dir": (if .name == "homepage-app" then "homepage-app" else "homepage-app/" + .name end), "heroku_app_name": (.url | split("/") | .[2] | split(".")[0])}]' "$APPS_JSON_PATH")

          if [ "$APP_DATA_JSON" == "[]" ]; then
            echo "::warning::${APPS_JSON_PATH} contains no valid app data. Skipping deployment matrix generation."
            echo "app_data_json=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Generated app data for matrix: $APP_DATA_JSON"
          echo "app_data_json=$APP_DATA_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  deploy_all_apps: # Job: Orchestrates deployment of all apps (now runs first, depends on apps.json)
    needs: prepare_deploy_matrix # Now depends on the new job for matrix data
    runs-on: ubuntu-latest
    if: ${{ needs.prepare_deploy_matrix.outputs.app_data_json != '[]' }}
    strategy:
      fail-fast: false # Allow other apps to deploy even if one fails
      matrix:
        app_data: ${{ fromJson(needs.prepare_deploy_matrix.outputs.app_data_json) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Heroku CLI
        run: |
          curl -L https://cli-assets.heroku.com/install.sh -o /tmp/heroku-install.sh
          chmod +x /tmp/heroku-install.sh
          /tmp/heroku-install.sh
        shell: bash

      - name: Install jq (for package.json parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read App Config and Prepare Deploy Variables
        id: prepare_vars
        run: |
          set -e
          APP_DIR="${{ matrix.app_data.app_dir }}"
          echo "Current APP_DIR: $APP_DIR"
          APP_FOLDER_NAME=$(basename "$APP_DIR")
          
          # Re-read package.json to get its 'name' for consistency check
          PACKAGE_JSON_APP_NAME=$(jq -r '.name' "$APP_DIR/package.json" || echo "")
          HEROKU_APP_TARGET_NAME=$(jq -r '.herokuAppName' "$APP_DIR/package.json" || echo "")

          if [ "$APP_FOLDER_NAME" != "$PACKAGE_JSON_APP_NAME" ]; then
            echo "::error::Inconsistency detected for app '${APP_FOLDER_NAME}' (path: '${APP_DIR}'):"
            echo "::error::Folder name ('${APP_FOLDER_NAME}') does NOT match 'name' in package.json ('${PACKAGE_JSON_APP_NAME}')."
            echo "::error::Please **rename either the folder or the 'name' in package.json to match**, then commit and re-run."
            exit 1
          fi

          if [ -z "$HEROKU_APP_TARGET_NAME" ] || [ "$HEROKU_APP_TARGET_NAME" == "null" ]; then
            echo "::error::Heroku app name (derived from URL in apps.json) is empty for app '${APP_FOLDER_NAME}'."
            echo "::error::Please ensure 'deployedUrl' is correctly set in '$APP_DIR/package.json' and points to a valid Heroku app URL."
            exit 1
          fi
          
          echo "Installing dependencies for ${APP_FOLDER_NAME} (path: '${APP_DIR}')..."
          npm install --prefix "$APP_DIR" || {
              echo "::error::npm install failed for app in '${APP_DIR}'. Deployment failed for this app."
              exit 1
          }

          echo "heroku_app_name_for_deploy=$HEROKU_APP_TARGET_NAME" >> "$GITHUB_OUTPUT"
          echo "app_folder_name_for_deploy=$APP_FOLDER_NAME" >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Deploy to Heroku - Actual Action
        id: deploy_action
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ steps.prepare_vars.outputs.heroku_app_name_for_deploy }}
          appdir: ${{ matrix.app_data.app_dir }}

  find_apps: # Job 2: Finds all deployable app directories (now runs after deploy_all_apps, or in parallel)
    needs: deploy_all_apps # This ensures it runs AFTER deploy_all_apps
    runs-on: ubuntu-latest
    outputs:
      app_dirs_json: ${{ steps.scan.outputs.app_dirs_json }}
    env:
      APP_BASE_DIRS: "homepage-app" # The top-level folder where your apps are

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for package.json parsing and JSON output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Scan for Apps
        id: scan
        run: |
          set -e

          ALL_APP_DIRS_ARRAY=()
          echo "Scanning for apps in: $APP_BASE_DIRS"
          for BASE_DIR in $APP_BASE_DIRS; do
            FOUND_DIRS=$(find "$BASE_DIR" -type f -name "package.json" -exec dirname {} \;)
            for DIR in $FOUND_DIRS; do
              ALL_APP_DIRS_ARRAY+=("$DIR")
            done
          done

          UNIQUE_APP_DIRS_NEWLINES=$(printf "%s\n" "${ALL_APP_DIRS_ARRAY[@]}" | sort -u)

          if [ -z "$UNIQUE_APP_DIRS_NEWLINES" ]; then
            echo "No applications found with package.json in '$APP_BASE_DIRS'. Exiting."
            printf "app_dirs_json=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Found applications in directories (for debugging):"
          echo "$UNIQUE_APP_DIRS_NEWLINES"

          APP_DIRS_JSON=$(echo "$UNIQUE_APP_DIRS_NEWLINES" | jq -R . | jq -s -c .)
          echo "Generated JSON (single line): $APP_DIRS_JSON"

          printf "app_dirs_json=%s\n" "$APP_DIRS_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  generate_docs_files: # Job 3: Generates apps.md and apps.json files using Python
    needs: find_apps # This job needs find_apps to get the list of apps
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.find_apps.outputs.app_dirs_json != '[]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Check Writable File Secrets # Updated warning message
        run: |
          # Check for apps.md secret
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_APPS_MD secret is not set or is empty."
            echo "::warning::To enable writing to 'apps.md', create a repository secret named 'RWT_WRITABLE_FILE_APPS_MD' with the value 'apps.md'."
          fi
          # Check for homepage-app/apps/apps.json secret
          if [ -z "${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}" ]; then
            echo "::warning::RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON secret is not set or is empty."
            echo "::warning::To enable writing to 'homepage-app/apps/apps.json', create a repository secret named 'RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON' with the value 'homepage-app/apps/apps.json'."
          fi
        shell: bash

      - name: Generate apps.md and apps.json Content with Python Script
        id: generate_content_py
        run: python .github/scripts/generate_app_list.py
        env:
          APP_DIRS_JSON_FROM_FIND_APPS: ${{ needs.find_apps.outputs.app_dirs_json }}
          RWT_WRITABLE_FILES: ${{ secrets.RWT_WRITABLE_FILES }} # This is for the old comma-separated secret, should be removed
          # Fix: Pass individual secrets explicitly to the Python script
          RWT_WRITABLE_FILE_APPS_MD: ${{ secrets.RWT_WRITABLE_FILE_APPS_MD }}
          RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON: ${{ secrets.RWT_WRITABLE_FILE_HOMEPAGE_APPS_JSON }}
        shell: bash

      - name: Write apps.md File
        if: ${{ steps.generate_content_py.outputs.apps_md_updated_flag == 'true' }}
        run: |
          APPS_MD_SECTION_CONTENT="${{ steps.generate_content_py.outputs.apps_md_section_content }}"
          echo "$APPS_MD_SECTION_CONTENT" > apps.md
        shell: bash
      
      - name: Commit and Push generated files
        if: |
          always() &&
          (steps.generate_content_py.outputs.apps_md_updated_flag == 'true' || 
           steps.generate_content_py.outputs.apps_json_updated_flag == 'true')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: Update deployed app links and JSON list"
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}
          add_options: "apps.md homepage-app/apps/apps.json"
